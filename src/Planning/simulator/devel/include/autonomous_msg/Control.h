// Generated by gencpp from file autonomous_msg/Control.msg
// DO NOT EDIT!


#ifndef AUTONOMOUS_MSG_MESSAGE_CONTROL_H
#define AUTONOMOUS_MSG_MESSAGE_CONTROL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace autonomous_msg
{
template <class ContainerAllocator>
struct Control_
{
  typedef Control_<ContainerAllocator> Type;

  Control_()
    : gear(0)
    , speed(0.0)
    , steer(0.0)
    , brake(0)  {
    }
  Control_(const ContainerAllocator& _alloc)
    : gear(0)
    , speed(0.0)
    , steer(0.0)
    , brake(0)  {
  (void)_alloc;
    }



   typedef uint8_t _gear_type;
  _gear_type gear;

   typedef double _speed_type;
  _speed_type speed;

   typedef double _steer_type;
  _steer_type steer;

   typedef uint8_t _brake_type;
  _brake_type brake;





  typedef boost::shared_ptr< ::autonomous_msg::Control_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::autonomous_msg::Control_<ContainerAllocator> const> ConstPtr;

}; // struct Control_

typedef ::autonomous_msg::Control_<std::allocator<void> > Control;

typedef boost::shared_ptr< ::autonomous_msg::Control > ControlPtr;
typedef boost::shared_ptr< ::autonomous_msg::Control const> ControlConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::autonomous_msg::Control_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::autonomous_msg::Control_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::autonomous_msg::Control_<ContainerAllocator1> & lhs, const ::autonomous_msg::Control_<ContainerAllocator2> & rhs)
{
  return lhs.gear == rhs.gear &&
    lhs.speed == rhs.speed &&
    lhs.steer == rhs.steer &&
    lhs.brake == rhs.brake;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::autonomous_msg::Control_<ContainerAllocator1> & lhs, const ::autonomous_msg::Control_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace autonomous_msg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::autonomous_msg::Control_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::autonomous_msg::Control_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::autonomous_msg::Control_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::autonomous_msg::Control_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::autonomous_msg::Control_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::autonomous_msg::Control_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::autonomous_msg::Control_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dc7c18410f31d94bc1d86a60a384c0a6";
  }

  static const char* value(const ::autonomous_msg::Control_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xdc7c18410f31d94bULL;
  static const uint64_t static_value2 = 0xc1d86a60a384c0a6ULL;
};

template<class ContainerAllocator>
struct DataType< ::autonomous_msg::Control_<ContainerAllocator> >
{
  static const char* value()
  {
    return "autonomous_msg/Control";
  }

  static const char* value(const ::autonomous_msg::Control_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::autonomous_msg::Control_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 gear\n"
"float64 speed\n"
"float64 steer\n"
"uint8 brake\n"
;
  }

  static const char* value(const ::autonomous_msg::Control_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::autonomous_msg::Control_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.gear);
      stream.next(m.speed);
      stream.next(m.steer);
      stream.next(m.brake);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Control_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::autonomous_msg::Control_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::autonomous_msg::Control_<ContainerAllocator>& v)
  {
    s << indent << "gear: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.gear);
    s << indent << "speed: ";
    Printer<double>::stream(s, indent + "  ", v.speed);
    s << indent << "steer: ";
    Printer<double>::stream(s, indent + "  ", v.steer);
    s << indent << "brake: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.brake);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AUTONOMOUS_MSG_MESSAGE_CONTROL_H
