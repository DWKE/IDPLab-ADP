// Generated by gencpp from file kusv_msgs/State.msg
// DO NOT EDIT!


#ifndef KUSV_MSGS_MESSAGE_STATE_H
#define KUSV_MSGS_MESSAGE_STATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace kusv_msgs
{
template <class ContainerAllocator>
struct State_
{
  typedef State_<ContainerAllocator> Type;

  State_()
    : speed_ms(0.0)
    , speed_kmh(0.0)  {
    }
  State_(const ContainerAllocator& _alloc)
    : speed_ms(0.0)
    , speed_kmh(0.0)  {
  (void)_alloc;
    }



   typedef double _speed_ms_type;
  _speed_ms_type speed_ms;

   typedef double _speed_kmh_type;
  _speed_kmh_type speed_kmh;





  typedef boost::shared_ptr< ::kusv_msgs::State_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kusv_msgs::State_<ContainerAllocator> const> ConstPtr;

}; // struct State_

typedef ::kusv_msgs::State_<std::allocator<void> > State;

typedef boost::shared_ptr< ::kusv_msgs::State > StatePtr;
typedef boost::shared_ptr< ::kusv_msgs::State const> StateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::kusv_msgs::State_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::kusv_msgs::State_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::kusv_msgs::State_<ContainerAllocator1> & lhs, const ::kusv_msgs::State_<ContainerAllocator2> & rhs)
{
  return lhs.speed_ms == rhs.speed_ms &&
    lhs.speed_kmh == rhs.speed_kmh;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::kusv_msgs::State_<ContainerAllocator1> & lhs, const ::kusv_msgs::State_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace kusv_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::kusv_msgs::State_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::kusv_msgs::State_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kusv_msgs::State_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::kusv_msgs::State_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kusv_msgs::State_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::kusv_msgs::State_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::kusv_msgs::State_<ContainerAllocator> >
{
  static const char* value()
  {
    return "628ebfdb24aaf42618651c8520152d92";
  }

  static const char* value(const ::kusv_msgs::State_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x628ebfdb24aaf426ULL;
  static const uint64_t static_value2 = 0x18651c8520152d92ULL;
};

template<class ContainerAllocator>
struct DataType< ::kusv_msgs::State_<ContainerAllocator> >
{
  static const char* value()
  {
    return "kusv_msgs/State";
  }

  static const char* value(const ::kusv_msgs::State_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::kusv_msgs::State_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 speed_ms\n"
"float64 speed_kmh\n"
;
  }

  static const char* value(const ::kusv_msgs::State_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::kusv_msgs::State_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.speed_ms);
      stream.next(m.speed_kmh);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct State_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kusv_msgs::State_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::kusv_msgs::State_<ContainerAllocator>& v)
  {
    s << indent << "speed_ms: ";
    Printer<double>::stream(s, indent + "  ", v.speed_ms);
    s << indent << "speed_kmh: ";
    Printer<double>::stream(s, indent + "  ", v.speed_kmh);
  }
};

} // namespace message_operations
} // namespace ros

#endif // KUSV_MSGS_MESSAGE_STATE_H
